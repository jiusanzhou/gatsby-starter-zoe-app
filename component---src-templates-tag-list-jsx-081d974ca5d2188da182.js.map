{"version":3,"sources":["webpack://gatsby-starter-zoe-app/./src/views/seo.jsx","webpack://gatsby-starter-zoe-app/./src/components/nav.jsx","webpack://gatsby-starter-zoe-app/./src/views/nav.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/header.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/footer.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/index.jsx","webpack://gatsby-starter-zoe-app/./src/styles/theme.js","webpack://gatsby-starter-zoe-app/./src/components/accent.jsx","webpack://gatsby-starter-zoe-app/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://gatsby-starter-zoe-app/./src/layouts/index.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/empty/index.jsx","webpack://gatsby-starter-zoe-app/./src/templates/tag-list.jsx"],"names":["description","meta","title","siteMeta","useSiteMetadata","lang","titleTemplate","PCNav","navs","props","colorMode","useColorMode","map","index","href","items","length","mx","key","trigger","fontWeight","role","alignItems","pure","_hover","as","ChevronDownIcon","ml","_groupHover","transform","transition","style","width","columns","spacing","icon","color","textDecoration","w","p","borderRadius","bg","colors","mr","size","src","name","fontSize","useColorModeValue","SMNav","useState","isOpen","setIsOpen","toggle","onOpen","onClose","display","SmallClose","Hamburger","h","sx","overflow","my","flexDir","mt","children","border","fixed","wraperBg","logoProps","position","top","borderBottomWidth","zIndex","left","right","px","margin","flex","justifyContent","disableBorder","disableGotop","disableLogo","disableSocials","disableLinks","copyright","primaryColor","author","links","socials","borderTopStyle","borderTopWidth","pt","pb","colorScheme","expend","Socials","flexWrap","maxWidth","header","footer","extendFooter","_maxWidth","Array","isArray","_with","_withBackground","minH","content","theme","_theme","fonts","body","heading","AccentGlobal","accentKey","accent","styles","React","css","strings","raw","slice","_layouts","default","_default","empty","layout","_props","layouts","tags","data","allMdxPost","group","textAlign","tag","fieldValue","counted"],"mappings":"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","file":"component---src-templates-tag-list-jsx-081d974ca5d2188da182.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport SEO from '../components/seo'\n\nimport { useSiteMetadata } from \"../utils/hooks\"\n\nconst SEOO = ({ description, meta, title }) => {\n    const siteMeta = useSiteMetadata()\n    return <SEO\n        lang={ siteMeta.lang }\n        title={ title || siteMeta.title }\n        titleTemplate={`%s | ${siteMeta.title}`}\n        meta={ meta }\n        description={ description || siteMeta.description } />\n}\n\nSEOO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string,\n}\n\nexport default SEOO","import { SmallCloseIcon, HamburgerIcon, TriangleDownIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar, Box, Flex, Heading, Icon, IconButton, Link, Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverHeader, PopoverTrigger, SimpleGrid, Text, useColorMode, useColorModeValue, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nimport { colors } from \"../styles/colors\";\nimport MLink from \"./link\";\n\n// no need to handle with recuive,\n// because we only handle 2 level\n\nconst PCNav = ({ navs = [], ...props }) => {\n    // responsive return\n    const { colorMode } = useColorMode()\n    return <Flex {...props}>\n        {navs.map(({ title, href, items }, index) => {\n            return (!items || items.length === 0) ?\n                // just return link or text\n                <Flex fontWeight=\"bold\" mx=\".6rem\" key={index}>\n                    {href\n                    ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                    : <Text>{title}</Text>}\n                </Flex>\n            : <Flex mx=\".6rem\" key={index}>\n                <Popover trigger=\"hover\">\n                    <PopoverTrigger>\n                        <Flex fontWeight=\"bold\" role=\"group\" alignItems=\"center\">\n                            {href\n                                ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                : <Text>{title}</Text>}\n                            <Icon as={ChevronDownIcon} ml=\".2rem\"\n                                _groupHover={{\n                                    transform: \"rotate( -180deg )\",\n                                    transition: \"all 0.2s ease-out\"\n                                }} />\n                        </Flex>\n                    </PopoverTrigger>\n\n                    {/* TODO: use size lg */}\n                    <PopoverContent style={{width: \"var(--chakra-sizes-lg)\"}}>\n                        <PopoverArrow />\n                        <PopoverBody style={{width: \"var(--chakra-sizes-lg)\"}}>\n                            <SimpleGrid columns={2} spacing={4}>\n                                {items.map(({title, description, href, icon, color}, index) => <Flex key={index}>\n                                    <MLink pure href={href} _hover={{textDecoration: \"none\"}} w=\"100%\">\n                                        <Flex w=\"100%\"\n                                            key={index}\n                                            p=\"2\" borderRadius=\".5rem\"\n                                            transition=\"all .3s ease-in-out\"\n                                            _hover={{bg: `${color||colors[index%colors.length]||'gray'}.${colorMode === \"light\" ? \"100\" : \"700\"}`}}>\n                                            <Avatar mr=\".5rem\" size=\"xs\" src={icon} name={title} />\n                                            <Box>\n                                                <Text fontSize=\"1rem\" fontWeight=\"bold\">{title}</Text>\n                                                <Text fontSize=\".8rem\" color={useColorModeValue(\"gray.700\", \"gray.200\")}>{description}</Text>\n                                            </Box>\n                                        </Flex>\n                                    </MLink>\n                                </Flex>)}\n                            </SimpleGrid>\n                        </PopoverBody>\n                    </PopoverContent>\n                </Popover>\n            </Flex>\n        })}\n    </Flex>\n}\n\nconst SMNav = ({ navs = [], ...props }) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n    return <Popover trigger=\"click\" onOpen={toggle} onClose={toggle} {...props}>\n        <PopoverTrigger>\n            <IconButton\n                borderRadius=\"full\"\n                display={props.display}\n                transition=\"all .3s ease-in-out\"\n                icon={isOpen?<SmallCloseIcon />:<HamburgerIcon />} />\n        </PopoverTrigger>\n        <PopoverContent display={props.display} h=\"100vh\" sx={{ width: \"100vw\", overflow: \"auto\"}}>\n            <PopoverBody>\n                <VStack my=\"5\" alignItems=\"flex-start\" spacing={5}>\n                    {navs.map(({ title, href, items }, index) => {\n                        return (!items || items.length === 0) ?\n                            // just return link or text\n                            <Flex fontWeight=\"bold\" mx=\".6rem\" key={index}>\n                                {href\n                                ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                : <Text>{title}</Text>}\n                            </Flex>\n                        : <Flex mx=\".6rem\" key={index} flexDir=\"column\">\n                            <Flex fontWeight=\"bold\">\n                                {href\n                                    ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                    : <Text>{title}</Text>}\n                            </Flex>\n                            <VStack mt=\"1rem\" ml=\"1rem\" alignItems=\"flex-start\">\n                                {items.map(({title, description, href, icon, color}, index) => <Flex key={index}>\n                                    <Avatar mr=\".5rem\" size=\"xs\" src={icon} name={title} />\n                                    <Text fontSize=\".875rem\">{title}</Text>\n                                </Flex>)}\n                            </VStack>\n                        </Flex>\n                    })}\n                </VStack>\n            </PopoverBody>\n        </PopoverContent>\n    </Popover>\n}\n\nconst Nav = (props) => {\n    return <Flex alignItems=\"center\" mr=\"1rem\">\n        <PCNav display={[\"none\", \"none\", \"none\", \"flex\"]} {...props} />\n        <SMNav display={[\"flex\", \"flex\", \"flex\", \"none\"]} {...props} />\n    </Flex>\n}\n\nexport default Nav;","import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport Nav from '../components/nav'\n\nimport { useSiteMetadata } from \"../utils/hooks\"\n\nconst Navv = (props) => {\n    const { navs } = useSiteMetadata()\n    return <Nav navs={ navs } { ...props } />\n}\n\nNavv.propTypes = {\n    onToggle: PropTypes.func\n}\n\nexport default Navv","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Box, Flex, useColorMode, useColorModeValue } from \"@chakra-ui/react\";\nimport Logo from \"../../views/logo\";\nimport ColorModeSwitcher from \"../../components/colormode\";\nimport Navv from \"../../views/nav\";\n\nconst Header = ({ children, border, fixed, wraperBg, logoProps, ...props }) => {\n    // TODO: fixed header with scroll\n    // TODO: navigation urls\n\n    const { colorMode } = useColorMode();\n    return (\n            <Flex as=\"header\"\n                w=\"100%\"\n                position={fixed?\"fixed\":null}\n                top=\"0\"\n                borderBottomWidth={border ? \"1px\" : \"0\"}\n                // bg=\"white\" // TODO: scroll header height to set bg white or layout bg\n                bg={wraperBg}\n                zIndex=\"9999\"\n                bg={colorMode === \"light\"\n                    ? \"var(--chakra-colors-white)\"\n                    : \"var(--chakra-colors-gray-800)\"}\n            >\n                <Flex\n                    h={[\"3em\", \"3.5em\", \"4em\", \"4.5em\"]}\n                    left=\"0\"\n                    right=\"0\"\n                    top=\"0\"\n                    px={[\"1em\", \"0\", \"0\", \"0\"]}\n                    margin=\"0 auto\"\n                    alignItems=\"center\"\n                    {...props}\n                >\n                    {/* Logo  display={[\"none\", \"none\", \"none\", \"flex\"]} */} \n                    <Logo {...logoProps} />\n                    <Flex flex=\"1\" justifyContent=\"flex-end\">\n                        {/* Nav Menu */}\n                        <Navv />\n                        {/* <Logo minimal display={[\"flex\", \"flex\", \"flex\", \"none\"]} {...logoProps} /> */}\n                        {/* Other */}\n                        <ColorModeSwitcher />\n                    </Flex>\n                </Flex>\n            </Flex>\n    );\n};\n\nHeader.propTypes = {\n    menuOpend: PropTypes.bool,\n    onToggle: PropTypes.func,\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport { Box, SimpleGrid } from \"@chakra-ui/react\";\n\nimport { useSiteMetadata } from \"../../utils/hooks\";\nimport { Socials } from \"../../components/socials\";\nimport Logo from \"../../views/logo\";\nimport GoTop from \"../../components/gotop\";\nimport Navlinks from \"../../components/navlinks\";\nimport Copyright from \"../../components/copyright\";\n\nconst Footer = ({\n    children,\n    disableBorder,\n    disableGotop,\n    disableLogo,\n    disableSocials,\n    disableLinks,\n    logoProps = {},\n    ...props\n}) => {\n    const {\n        copyright,\n        primaryColor,\n        author,\n        links = [],\n        socials = {},\n    } = useSiteMetadata();\n    return (\n        <Box\n            w=\"100%\"\n            borderTopStyle=\"solid\"\n            borderTopWidth={!disableBorder ? \"1px\" : \"0\"}\n        >\n            <Box\n                left=\"0\"\n                right=\"0\"\n                top=\"0\"\n                px={[\"1em\", \"0\", \"0\", \"0\"]}\n                pt=\"2rem\"\n                pb=\"1rem\"\n                margin=\"0 auto\"\n                position=\"relative\"\n                borderTopStyle=\"solid\"\n                {...props}\n            >\n                {/* back to top button */}\n                {!disableGotop && <GoTop colorScheme={primaryColor} />}\n\n                {/* extend section */}\n                {children}\n\n                {/* footer main section */}\n                {/* TODO: use links to section generate grid layout */}\n                <SimpleGrid\n                    w=\"100%\"\n                    mt={[\".5rem\", \".7rem\", \".7rem\", \"1rem\"]}\n                    columns={[1, 1, 3, 4]}\n                    spacing=\"1rem\"\n                >\n                    <Box>\n                        {/* logo */}\n                        {!disableLogo && <Logo expend={true} {...logoProps} />}\n                        {/* social links */}\n                        {!disableSocials && <Socials mt=\"1rem\" socials={socials} />}\n                    </Box>\n\n                    {/* nav links */}\n                    {!disableLinks && <Navlinks links={links} />}\n                </SimpleGrid>\n\n                {/* copyright */}\n                <Copyright\n                    flexWrap=\"wrap\"\n                    mt=\"2rem\"\n                    copyright={copyright}\n                    author={author}\n                />\n            </Box>\n        </Box>\n    );\n};\n\nFooter.propTypes = {};\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, useColorModeValue } from \"@chakra-ui/react\";\n\nimport SEO from \"../../views/seo\";\nimport Header from \"./header\";\nimport Footer from \"./footer\";\nimport { _withBackground } from \"../../components/_with\";\nimport { useSiteMetadata } from \"../../utils/hooks\";\n\nconst { maxWidth = [\"100%\", \"80%\", \"80%\", \"80%\", \"60rem\"] } = useSiteMetadata();\n\nconst Layout = ({\n    title,\n    description,\n    header = {},\n    footer = {},\n    fixed = true,\n    children,\n    extendFooter,\n    // maxWidth = \"60rem\",\n    ...props\n}) => {\n    const _maxWidth = Array.isArray(maxWidth)\n        ? maxWidth\n        : [\"100%\", \"80%\", \"80%\", \"80%\", maxWidth];\n\n    // TODO: make this configurable\n    const lightBg = {\n        size: \"cover\",\n        repeat: \"repeat-x\",\n        attachment: \"scroll\",\n        image: \"images/bg-shapes.svg\",\n    };\n\n    // const [opened, setOpened] = useState(false);\n    // background-image: url(\"https://assets.website-files.com/5e1c4fb5db4d5243c0021d34/5e1c4fb5db4d526c44021d44_bg-shapes.svg\");\n    return (\n        <_withBackground minH=\"calc(100vh)\">\n            {/* inject seo header */}\n            <SEO\n                title={title}\n                description={description}\n                meta={[\n                    {\n                        name: \"viewport\",\n                        content:\n                            \"width=device-width, initial-scale=1.0, minimum-scale=1.0\",\n                    },\n                ]}\n            />\n            {/* header */}\n            <Header fixed={fixed} w={_maxWidth} {...header} />\n            {/* main body */}\n            <Box as=\"main\" pt={fixed?[\"3em\", \"3.5em\", \"4em\", \"4.5em\"]:null}>\n                {children}\n            </Box>\n            {/* footer */}\n            <Footer w={_maxWidth} {...footer}>\n                {extendFooter}\n            </Footer>\n        </_withBackground>\n    );\n};\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    extendFooter: PropTypes.node,\n};\n\n// multi layout and register with layouts\n\nexport default Layout;\n","import { theme as _theme } from \"@chakra-ui/react\"\n\nexport const theme = {\n    ..._theme,\n    fonts: {\n        ..._theme.fonts,\n        body: `\"Source Sans Pro\",${_theme.fonts.body}`,\n        heading: `\"Source Sans Pro\",${_theme.fonts.heading}`,\n    },\n}","import React from \"react\"\nimport { css, Global } from '@emotion/react'\n\nimport { theme } from \"../styles/theme\"\n\nexport const AccentGlobal = ({ primaryColor }) => {\n    const accentKey = primaryColor\n    let accent = theme.colors[accentKey]\n    if (!accent) {\n      // TODO: primaryColor is just a color\n      accent = theme.colors[\"purple\"]\n    }\n\n    const styles = React.useMemo(\n      () => css`\n        :root {\n          --colors-accent-50: ${accent[50]};\n          --colors-accent-100: ${accent[100]};\n          --colors-accent-200: ${accent[200]};\n          --colors-accent-300: ${accent[300]};\n          --colors-accent-400: ${accent[400]};\n          --colors-accent-500: ${accent[500]};\n          --colors-accent-600: ${accent[600]};\n          --colors-accent-700: ${accent[700]};\n          --colors-accent-800: ${accent[800]};\n          --colors-accent-900: ${accent[900]};\n        }\n      `,\n      [accent]\n    )\n    return <Global styles={styles} />\n  }","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport _default from \"./default\";\nimport empty from \"./empty\";\n\nimport \"../styles/global.css\";\nimport { useSiteMetadata } from \"../utils/hooks\";\nimport { AccentGlobal } from \"../components/accent\";\nimport MDXRoot from \"../components/mdx\";\n\nconst _layouts = {\n    default: _default,\n    empty,\n};\n\nexport default ({ layout = \"default\", ...props }) => {\n    // if layout is string create with or { name }\n    let name;\n    let _props = {};\n    switch (typeof layout) {\n        case \"string\":\n            name = layout;\n            _props = { ...props };\n            break;\n        case \"object\":\n            name = layout.name;\n            _props = { ...layout, ...props, name: null };\n            break;\n        default:\n            break;\n    }\n\n    // merge props from siteMeta\n    const { primaryColor, layouts = {} } = useSiteMetadata();\n\n    _props = { ..._props, ...(layouts[name] || {}) };\n\n    // generate the max width\n    // _props.maxWidth = Array.isArray(_props.maxWidth) ? _props.maxWidth : [\"100%\", \"80%\", \"80%\", \"80%\", _props.maxWidth]\n\n    // store _props in global css\n\n    // create children in here???\n    return (\n        <ChakraProvider>\n            <AccentGlobal primaryColor={primaryColor} {..._props} />\n            <MDXRoot>\n                {React.createElement(_layouts[name] || _default, _props)}\n            </MDXRoot>\n        </ChakraProvider>\n    );\n};\n","import React from \"react\"\n\n// default with out layout\nexport default ({ children }) => <>{children}</>","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport MSection from \"../components/section\";\nimport Layout from \"../layouts\";\nimport Tags from \"../widgets/tags\";\n\nconst TagList = ({ data }) => {\n    const tags = data.allMdxPost.group\n\n    return <Layout title=\"文章标签\">\n      <MSection minH=\"calc(100vh - 20rem)\" justifyContent=\"\" textAlign=\"left\"\n      title=\"标签\" description={`共有 ${tags.length} 个标签`}>\n        <Tags mt=\"2\" items={tags.map((tag) => ({\n          ...tag,\n          name: tag.fieldValue,\n        }))} counted />\n      </MSection>\n    </Layout>\n}\n\nexport default TagList\n\nexport const query = graphql`\nquery {\n  allMdxPost(sort: { fields: tags___name, order: DESC }) {\n    group(field: tags___name) {\n      fieldValue\n      totalCount\n    }\n  }\n}`"],"sourceRoot":""}