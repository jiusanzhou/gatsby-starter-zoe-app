{"version":3,"sources":["webpack://gatsby-starter-zoe-app/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://gatsby-starter-zoe-app/./src/templates/tag-page.jsx","webpack://gatsby-starter-zoe-app/./src/widgets/tags.jsx"],"names":["_objectDestructuringEmpty","obj","TypeError","data","tag","pageContext","_basePathBlog","useSiteMetadata","basePathBlog","posts","allMdxPost","nodes","layout","title","minH","justifyContent","textAlign","description","my","spacing","href","type","items","map","item","excerpt","purePath","slug","subTitle","tags","color","useColorModeValue","mt","simple","slice","trailing","createdTime","display","ml","alignItems","w","leading","counted","props","idx","name","totalCount","key","pure","kebabCase","borderRadius","colorScheme","genColor","charCodeAt"],"mappings":"sIAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gC,01BC0CvC,UAhCiB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAqBC,EAAY,EAA3BC,YAAeD,IAGjCE,GAFmBC,SAAjBC,cAE8B,QAEhCC,EAAQN,EAAKO,WAAWC,MAE9B,OAAO,gBAAC,IAAD,CAAQC,OAAO,UAAUC,MAAK,IAAMT,EAAN,QACnC,gBAAC,UAAD,CAAUU,KAAK,sBAAsBC,eAAe,GAAGC,UAAU,OAC/DH,MAAK,SAAWT,EAAOa,YAAY,gBACnC,gBAAC,KAAD,CAAQC,GAAG,OAAOC,QAAQ,IAAIJ,eAAe,YAE3C,gBAAC,IAAD,CAAOK,KAAK,cAAZ,SAEF,gBAAC,IAAD,CAAWC,KAAK,OAAOC,MAAOb,EAAMc,KAAI,SAACC,GAAD,cACnCA,GADmC,IAEtCP,YAAaO,EAAKC,QAClBL,MAAMM,OAAYpB,EAAJ,IAAqBkB,EAAKG,WACrCC,SAAU,gBAAWC,EAAX,EAAG1B,KAAQ0B,MAAX,mBACb,gBAAC,IAAD,CAAMC,OAAOC,uBAAkB,WAAY,YAAaC,GAAG,SAEzD,gBAAC,IAAD,CAAMC,QAAM,EAACX,MAAOO,EAAKK,MAAM,EAAG,OAEnCC,SAAU,gBAAWC,EAAX,EAAGjC,KAAQiC,aAAX,mBACX,gBAAC,IAAD,CAAMC,QAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAASC,GAAG,OAAOC,WAAW,SAASC,EAAE,cAAcV,OAAOC,uBAAkB,WAAY,aAC1I,gBAAC,IAAD,KAAOK,KAERK,QAAS,sBAAGtC,OAAH,mBAA2B,Y,2JCpB7C,IAZa,SAAC,GAA+D,IAAD,IAA5DmB,aAA4D,MAApD,GAAoD,MAAhDW,cAAgD,aAAhCS,eAAgC,SAAZC,GAAY,YACxE,OAAO,gBAAC,IAAD,eAAMxB,QAAS,GAAOwB,GAAQrB,EAAMC,KAAI,WAAqBqB,GAArB,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,WAAR,OAC3C,gBAAC,IAAD,CAAUC,IAAKH,GACX,gBAAC,IAAD,CAAOI,MAAI,EAAC5B,KAAI,cAAgB6B,IAAUJ,IACtC,gBAAC,KAAD,CAAKK,aAAa,OAAOC,YAAalB,EAAO,QAAOmB,OAASP,EAAKX,MAAM,GAAGmB,eACvE,gBAAC,KAAD,UAAaR,EAAb,IAAoBH,EAAQ,IAAII,EAAL,IAAmB","file":"component---src-templates-tag-page-jsx-0484758b9918e23b308e.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { Flex, HStack, Link, Text, useColorModeValue } from \"@chakra-ui/react\"\nimport { graphql } from \"gatsby\"\nimport React from \"react\"\nimport ItemsView from \"../components/itemsView\"\nimport MLink from \"../components/link\"\nimport MSection from \"../components/section\"\nimport Layout from \"../layouts/default\"\nimport { purePath } from \"../utils/helper\"\nimport { useSiteMetadata } from \"../utils/hooks\"\nimport Tags from \"../widgets/tags\"\n\nconst PostList = ({ data, pageContext: { tag } }) => {\n  const { basePathBlog } = useSiteMetadata()\n\n  const _basePathBlog = basePathBlog || \"/blog\"\n\n  const posts = data.allMdxPost.nodes\n\n  return <Layout layout=\"default\" title={`\"${tag}\"的文章`}>\n    <MSection minH=\"calc(100vh - 20rem)\" justifyContent=\"\" textAlign=\"left\"\n      title={`博客文章: ${tag}`} description=\"写作是一种自我学习的方式\">\n      <HStack my=\"2rem\" spacing=\"5\" justifyContent=\"flex-end\">\n        {/* <MLink href=\"archives\">查看归档</MLink> */}\n        <MLink href=\"../../tags\">全部标签</MLink>\n      </HStack>\n      <ItemsView type=\"tile\" items={posts.map((item) => ({\n        ...item,\n        description: item.excerpt,\n        href: purePath(`${_basePathBlog}/${item.slug}`),\n      }))} subTitle={({ data: { tags }, ...props }) => (\n        <Flex color={useColorModeValue(\"gray.400\", \"gray.700\")} mt=\".3rem\">\n          {/* <Text>{createdTime}</Text> */}\n          <Tags simple items={tags.slice(0, 3)} />\n        </Flex>\n      )} trailing={({ data: { createdTime }, ...props}) => (\n        <Flex display={[\"none\", \"none\", \"flex\", \"flex\", \"flex\"]} ml=\"1rem\" alignItems=\"center\" w=\"fit-content\" color={useColorModeValue(\"gray.400\", \"gray.700\")}>\n          <Text>{createdTime}</Text>\n        </Flex>\n      )} leading={({ data: {}, ...props}) => null}/>\n    </MSection>\n  </Layout>\n}\n\nexport default PostList\n\n// ($formatString: String!)\n// (formatString: $formatString)\nexport const query = graphql`\n  query ($formatString: String!, $tag: String!) {\n    allMdxPost(\n      sort: { fields: createdTime, order: DESC }\n      filter: {tags: {elemMatch: {name: {eq: $tag}}}}\n    ) {\n      nodes {\n        slug\n        title\n        createdTime(formatString: $formatString)\n        modifiedTime(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`","import { Box, Flex, HStack, Link, Tag, TagLabel, TagLeftIcon, Wrap, WrapItem } from '@chakra-ui/react'\nimport kebabCase from 'lodash.kebabcase'\nimport React from 'react'\nimport MLink from '../components/link'\nimport { genColor } from '../styles/colors'\n\nconst Tags = ({ items = [], simple = false, counted = false, ...props }) => {\n    return <Wrap spacing={4} {...props}>{items.map(({name, totalCount}, idx) => (\n        <WrapItem key={idx}>\n            <MLink pure href={`/blogs/tag/${kebabCase(name)}`}>\n                <Tag borderRadius=\"full\" colorScheme={simple?\"gray\":genColor(name.slice(0).charCodeAt())}>\n                    <TagLabel># {name} {counted?`(${totalCount})`:\"\"}</TagLabel>\n                </Tag>\n            </MLink>\n        </WrapItem>))}\n    </Wrap>\n}\n\nexport default Tags"],"sourceRoot":""}