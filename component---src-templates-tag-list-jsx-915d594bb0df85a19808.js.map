{"version":3,"sources":["webpack://gatsby-starter-zoe-app/./src/views/seo.jsx","webpack://gatsby-starter-zoe-app/./src/views/logo.jsx","webpack://gatsby-starter-zoe-app/./src/components/nav.jsx","webpack://gatsby-starter-zoe-app/./src/views/nav.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/header.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/footer.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/default/index.jsx","webpack://gatsby-starter-zoe-app/./src/styles/theme.js","webpack://gatsby-starter-zoe-app/./src/components/accent.jsx","webpack://gatsby-starter-zoe-app/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack://gatsby-starter-zoe-app/./src/layouts/index.jsx","webpack://gatsby-starter-zoe-app/./src/layouts/empty/index.jsx","webpack://gatsby-starter-zoe-app/./src/styles/colors.js","webpack://gatsby-starter-zoe-app/./src/templates/tag-list.jsx","webpack://gatsby-starter-zoe-app/./src/widgets/tags.jsx"],"names":["description","meta","title","siteMeta","useSiteMetadata","lang","titleTemplate","props","logo","version","primaryColor","w","name","img","sup","colorScheme","PCNav","navs","colorMode","useColorMode","map","index","href","items","length","mx","key","trigger","fontWeight","role","alignItems","pure","_hover","as","ChevronDownIcon","ml","_groupHover","transform","transition","style","width","columns","spacing","icon","color","textDecoration","p","borderRadius","bg","colors","mr","size","src","fontSize","useColorModeValue","SMNav","useState","isOpen","setIsOpen","toggle","onOpen","onClose","display","SmallClose","Hamburger","h","sx","overflow","my","flexDir","mt","children","border","fixed","wraperBg","logoProps","position","top","borderBottomWidth","zIndex","left","right","px","margin","flex","justifyContent","disableBorder","disableGotop","disableLogo","disableSocials","disableLinks","copyright","author","links","socials","borderTopStyle","borderTopWidth","pt","pb","expend","Socials","flexWrap","maxWidth","header","footer","extendFooter","_maxWidth","Array","isArray","_with","minH","content","theme","_theme","fonts","body","heading","AccentGlobal","accentKey","accent","styles","React","css","strings","raw","slice","_layouts","default","_default","empty","layout","_props","layouts","genColor","a","tags","data","allMdxPost","group","textAlign","tag","fieldValue","counted","simple","idx","totalCount","kebabCase","charCodeAt"],"mappings":"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","file":"component---src-templates-tag-list-jsx-915d594bb0df85a19808.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport SEO from '../components/seo'\n\nimport { useSiteMetadata } from \"../utils/hooks\"\n\nconst SEOO = ({ description, meta, title }) => {\n    const siteMeta = useSiteMetadata()\n    return <SEO\n        lang={ siteMeta.lang }\n        title={ title || siteMeta.title }\n        titleTemplate={`%s | ${siteMeta.title}`}\n        meta={ meta }\n        description={ description || siteMeta.description } />\n}\n\nSEOO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string,\n}\n\nexport default SEOO","import { Flex } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport Logo from \"../components/logo\";\n\nimport { useSiteMetadata } from \"../utils/hooks\";\n\nconst ViewLogo = ({ ...props }) => {\n    const { title, logo, version, description, primaryColor } = useSiteMetadata();\n    return (\n        <Flex w=\"fit-content\">\n            <Logo\n                name={title}\n                description={description}\n                img={logo}\n                sup={version}\n                colorScheme={primaryColor}\n                {...props}\n            />\n        </Flex>\n    );\n};\n\nexport default ViewLogo","import { SmallCloseIcon, HamburgerIcon, TriangleDownIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar, Box, Flex, Heading, Icon, IconButton, Link, Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverHeader, PopoverTrigger, SimpleGrid, Text, useColorMode, useColorModeValue, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nimport { colors } from \"../styles/colors\";\nimport MLink from \"./link\";\n\n// no need to handle with recuive,\n// because we only handle 2 level\n\nconst PCNav = ({ navs = [], ...props }) => {\n    // responsive return\n    const { colorMode } = useColorMode()\n    return <Flex {...props}>\n        {navs.map(({ title, href, items }, index) => {\n            return (!items || items.length === 0) ?\n                // just return link or text\n                <Flex fontWeight=\"bold\" mx=\".6rem\" key={index}>\n                    {href\n                    ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                    : <Text>{title}</Text>}\n                </Flex>\n            : <Flex mx=\".6rem\" key={index}>\n                <Popover trigger=\"hover\">\n                    <PopoverTrigger>\n                        <Flex fontWeight=\"bold\" role=\"group\" alignItems=\"center\">\n                            {href\n                                ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                : <Text>{title}</Text>}\n                            <Icon as={ChevronDownIcon} ml=\".2rem\"\n                                _groupHover={{\n                                    transform: \"rotate( -180deg )\",\n                                    transition: \"all 0.2s ease-out\"\n                                }} />\n                        </Flex>\n                    </PopoverTrigger>\n\n                    {/* TODO: use size lg */}\n                    <PopoverContent style={{width: \"var(--chakra-sizes-lg)\"}}>\n                        <PopoverArrow />\n                        <PopoverBody style={{width: \"var(--chakra-sizes-lg)\"}}>\n                            <SimpleGrid columns={2} spacing={4}>\n                                {items.map(({title, description, href, icon, color}, index) => <Flex key={index}>\n                                    <MLink pure href={href} _hover={{textDecoration: \"none\"}} w=\"100%\">\n                                        <Flex w=\"100%\"\n                                            key={index}\n                                            p=\"2\" borderRadius=\".5rem\"\n                                            transition=\"all .3s ease-in-out\"\n                                            _hover={{bg: `${color||colors[index%colors.length]||'gray'}.${colorMode === \"light\" ? \"100\" : \"700\"}`}}>\n                                            <Avatar mr=\".5rem\" size=\"xs\" src={icon} name={title} />\n                                            <Box>\n                                                <Text fontSize=\"1rem\" fontWeight=\"bold\">{title}</Text>\n                                                <Text fontSize=\".8rem\" color={useColorModeValue(\"gray.700\", \"gray.200\")}>{description}</Text>\n                                            </Box>\n                                        </Flex>\n                                    </MLink>\n                                </Flex>)}\n                            </SimpleGrid>\n                        </PopoverBody>\n                    </PopoverContent>\n                </Popover>\n            </Flex>\n        })}\n    </Flex>\n}\n\nconst SMNav = ({ navs = [], ...props }) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n    return <Popover trigger=\"click\" onOpen={toggle} onClose={toggle} {...props}>\n        <PopoverTrigger>\n            <IconButton\n                borderRadius=\"full\"\n                display={props.display}\n                transition=\"all .3s ease-in-out\"\n                icon={isOpen?<SmallCloseIcon />:<HamburgerIcon />} />\n        </PopoverTrigger>\n        <PopoverContent display={props.display} h=\"100vh\" sx={{ width: \"100vw\", overflow: \"auto\"}}>\n            <PopoverBody>\n                <VStack my=\"5\" alignItems=\"flex-start\" spacing={5}>\n                    {navs.map(({ title, href, items }, index) => {\n                        return (!items || items.length === 0) ?\n                            // just return link or text\n                            <Flex fontWeight=\"bold\" mx=\".6rem\" key={index}>\n                                {href\n                                ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                : <Text>{title}</Text>}\n                            </Flex>\n                        : <Flex mx=\".6rem\" key={index} flexDir=\"column\">\n                            <Flex fontWeight=\"bold\">\n                                {href\n                                    ? <MLink pure href={href} _hover={{}}>{title}</MLink>\n                                    : <Text>{title}</Text>}\n                            </Flex>\n                            <VStack mt=\"1rem\" ml=\"1rem\" alignItems=\"flex-start\">\n                                {items.map(({title, description, href, icon, color}, index) => <Flex key={index}>\n                                    <Avatar mr=\".5rem\" size=\"xs\" src={icon} name={title} />\n                                    <Text fontSize=\".875rem\">{title}</Text>\n                                </Flex>)}\n                            </VStack>\n                        </Flex>\n                    })}\n                </VStack>\n            </PopoverBody>\n        </PopoverContent>\n    </Popover>\n}\n\nconst Nav = (props) => {\n    return <Flex alignItems=\"center\" mr=\"1rem\">\n        <PCNav display={[\"none\", \"none\", \"none\", \"flex\"]} {...props} />\n        <SMNav display={[\"flex\", \"flex\", \"flex\", \"none\"]} {...props} />\n    </Flex>\n}\n\nexport default Nav;","import React from 'react'\nimport PropTypes from \"prop-types\"\n\nimport Nav from '../components/nav'\n\nimport { useSiteMetadata } from \"../utils/hooks\"\n\nconst Navv = (props) => {\n    const { navs } = useSiteMetadata()\n    return <Nav navs={ navs } { ...props } />\n}\n\nNavv.propTypes = {\n    onToggle: PropTypes.func\n}\n\nexport default Navv","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Box, Flex, useColorMode, useColorModeValue } from \"@chakra-ui/react\";\nimport Logo from \"../../views/logo\";\nimport ColorModeSwitcher from \"../../components/colormode\";\nimport Navv from \"../../views/nav\";\n\nconst Header = ({ children, border, fixed, wraperBg, logoProps, ...props }) => {\n    // TODO: fixed header with scroll\n    // TODO: navigation urls\n\n    const { colorMode } = useColorMode();\n    return (\n            <Flex as=\"header\"\n                w=\"100%\"\n                position={fixed?\"fixed\":null}\n                top=\"0\"\n                borderBottomWidth={border ? \"1px\" : \"0\"}\n                // bg=\"white\" // TODO: scroll header height to set bg white or layout bg\n                bg={wraperBg}\n                zIndex=\"9999\"\n                bg={colorMode === \"light\"\n                    ? \"var(--chakra-colors-white)\"\n                    : \"var(--chakra-colors-gray-800)\"}\n            >\n                <Flex\n                    h={[\"3em\", \"3.5em\", \"4em\", \"4.5em\"]}\n                    left=\"0\"\n                    right=\"0\"\n                    top=\"0\"\n                    px={[\"1em\", \"0\", \"0\", \"0\"]}\n                    margin=\"0 auto\"\n                    alignItems=\"center\"\n                    {...props}\n                >\n                    {/* Logo  display={[\"none\", \"none\", \"none\", \"flex\"]} */} \n                    <Logo {...logoProps} />\n                    <Flex flex=\"1\" justifyContent=\"flex-end\">\n                        {/* Nav Menu */}\n                        <Navv />\n                        {/* <Logo minimal display={[\"flex\", \"flex\", \"flex\", \"none\"]} {...logoProps} /> */}\n                        {/* Other */}\n                        <ColorModeSwitcher />\n                    </Flex>\n                </Flex>\n            </Flex>\n    );\n};\n\nHeader.propTypes = {\n    menuOpend: PropTypes.bool,\n    onToggle: PropTypes.func,\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport { Box, SimpleGrid } from \"@chakra-ui/react\";\n\nimport { useSiteMetadata } from \"../../utils/hooks\";\nimport { Socials } from \"../../components/socials\";\nimport Logo from \"../../views/logo\";\nimport GoTop from \"../../components/gotop\";\nimport Navlinks from \"../../components/navlinks\";\nimport Copyright from \"../../components/copyright\";\n\nconst Footer = ({\n    children,\n    disableBorder,\n    disableGotop,\n    disableLogo,\n    disableSocials,\n    disableLinks,\n    logoProps = {},\n    ...props\n}) => {\n    const {\n        copyright,\n        primaryColor,\n        author,\n        links = [],\n        socials = {},\n    } = useSiteMetadata();\n    return (\n        <Box\n            w=\"100%\"\n            borderTopStyle=\"solid\"\n            borderTopWidth={!disableBorder ? \"1px\" : \"0\"}\n        >\n            <Box\n                left=\"0\"\n                right=\"0\"\n                top=\"0\"\n                px={[\"1em\", \"0\", \"0\", \"0\"]}\n                pt=\"2rem\"\n                pb=\"1rem\"\n                margin=\"0 auto\"\n                position=\"relative\"\n                borderTopStyle=\"solid\"\n                {...props}\n            >\n                {/* back to top button */}\n                {!disableGotop && <GoTop colorScheme={primaryColor} />}\n\n                {/* extend section */}\n                {children}\n\n                {/* footer main section */}\n                {/* TODO: use links to section generate grid layout */}\n                <SimpleGrid\n                    w=\"100%\"\n                    mt={[\".5rem\", \".7rem\", \".7rem\", \"1rem\"]}\n                    columns={[1, 1, 3, 4]}\n                    spacing=\"1rem\"\n                >\n                    <Box>\n                        {/* logo */}\n                        {!disableLogo && <Logo expend={true} {...logoProps} />}\n                        {/* social links */}\n                        {!disableSocials && <Socials mt=\"1rem\" socials={socials} />}\n                    </Box>\n\n                    {/* nav links */}\n                    {!disableLinks && <Navlinks links={links} />}\n                </SimpleGrid>\n\n                {/* copyright */}\n                <Copyright\n                    flexWrap=\"wrap\"\n                    mt=\"2rem\"\n                    copyright={copyright}\n                    author={author}\n                />\n            </Box>\n        </Box>\n    );\n};\n\nFooter.propTypes = {};\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, useColorModeValue } from \"@chakra-ui/react\";\n\nimport SEO from \"../../views/seo\";\nimport Header from \"./header\";\nimport Footer from \"./footer\";\nimport { _withBackground } from \"../../components/_with\";\nimport { useSiteMetadata } from \"../../utils/hooks\";\n\nconst { maxWidth = [\"100%\", \"80%\", \"80%\", \"80%\", \"60rem\"] } = useSiteMetadata();\n\nconst Layout = ({\n    title,\n    description,\n    header = {},\n    footer = {},\n    fixed = true,\n    children,\n    extendFooter,\n    // maxWidth = \"60rem\",\n    ...props\n}) => {\n    const _maxWidth = Array.isArray(maxWidth)\n        ? maxWidth\n        : [\"100%\", \"80%\", \"80%\", \"80%\", maxWidth];\n\n    // TODO: make this configurable\n    const lightBg = {\n        size: \"cover\",\n        repeat: \"repeat-x\",\n        attachment: \"scroll\",\n        image: \"images/bg-shapes.svg\",\n    };\n\n    // const [opened, setOpened] = useState(false);\n    // background-image: url(\"https://assets.website-files.com/5e1c4fb5db4d5243c0021d34/5e1c4fb5db4d526c44021d44_bg-shapes.svg\");\n    return (\n        <_withBackground minH=\"calc(100vh)\">\n            {/* inject seo header */}\n            <SEO\n                title={title}\n                description={description}\n                meta={[\n                    {\n                        name: \"viewport\",\n                        content:\n                            \"width=device-width, initial-scale=1.0, minimum-scale=1.0\",\n                    },\n                ]}\n            />\n            {/* header */}\n            <Header fixed={fixed} w={_maxWidth} {...header} />\n            {/* main body */}\n            <Box as=\"main\" pt={fixed?[\"3em\", \"3.5em\", \"4em\", \"4.5em\"]:null}>\n                {children}\n            </Box>\n            {/* footer */}\n            <Footer w={_maxWidth} {...footer}>\n                {extendFooter}\n            </Footer>\n        </_withBackground>\n    );\n};\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    extendFooter: PropTypes.node,\n};\n\n// multi layout and register with layouts\n\nexport default Layout;\n","import { theme as _theme } from \"@chakra-ui/react\"\n\nexport const theme = {\n    ..._theme,\n    fonts: {\n        ..._theme.fonts,\n        body: `\"Source Sans Pro\",${_theme.fonts.body}`,\n        heading: `\"Source Sans Pro\",${_theme.fonts.heading}`,\n    },\n}","import React from \"react\"\nimport { css, Global } from '@emotion/react'\n\nimport { theme } from \"../styles/theme\"\n\nexport const AccentGlobal = ({ primaryColor }) => {\n    const accentKey = primaryColor\n    let accent = theme.colors[accentKey]\n    if (!accent) {\n      // TODO: primaryColor is just a color\n      accent = theme.colors[\"purple\"]\n    }\n\n    const styles = React.useMemo(\n      () => css`\n        :root {\n          --colors-accent-50: ${accent[50]};\n          --colors-accent-100: ${accent[100]};\n          --colors-accent-200: ${accent[200]};\n          --colors-accent-300: ${accent[300]};\n          --colors-accent-400: ${accent[400]};\n          --colors-accent-500: ${accent[500]};\n          --colors-accent-600: ${accent[600]};\n          --colors-accent-700: ${accent[700]};\n          --colors-accent-800: ${accent[800]};\n          --colors-accent-900: ${accent[900]};\n        }\n      `,\n      [accent]\n    )\n    return <Global styles={styles} />\n  }","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport _default from \"./default\";\nimport empty from \"./empty\";\n\nimport \"../styles/global.css\";\nimport { useSiteMetadata } from \"../utils/hooks\";\nimport { AccentGlobal } from \"../components/accent\";\nimport MDXRoot from \"../components/mdx\";\n\nconst _layouts = {\n    default: _default,\n    empty,\n};\n\nexport default ({ layout = \"default\", ...props }) => {\n    // if layout is string create with or { name }\n    let name;\n    let _props = {};\n    switch (typeof layout) {\n        case \"string\":\n            name = layout;\n            _props = { ...props };\n            break;\n        case \"object\":\n            name = layout.name;\n            _props = { ...layout, ...props, name: null };\n            break;\n        default:\n            break;\n    }\n\n    // merge props from siteMeta\n    const { primaryColor, layouts = {} } = useSiteMetadata();\n\n    _props = { ..._props, ...(layouts[name] || {}) };\n\n    // generate the max width\n    // _props.maxWidth = Array.isArray(_props.maxWidth) ? _props.maxWidth : [\"100%\", \"80%\", \"80%\", \"80%\", _props.maxWidth]\n\n    // store _props in global css\n\n    // create children in here???\n    return (\n        <ChakraProvider>\n            <AccentGlobal primaryColor={primaryColor} {..._props} />\n            <MDXRoot>\n                {React.createElement(_layouts[name] || _default, _props)}\n            </MDXRoot>\n        </ChakraProvider>\n    );\n};\n","import React from \"react\"\n\n// default with out layout\nexport default ({ children }) => <>{children}</>","\n\nexport const colors = [\n    'green', 'teal', 'blue',\n    'red', 'orange', 'yellow',\n    'cyan', 'purple', 'pink'\n]\n\nexport const genColor = (a) => colors[a % colors.length]","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport MSection from \"../components/section\";\nimport Layout from \"../layouts\";\nimport Tags from \"../widgets/tags\";\n\nconst TagList = ({ data }) => {\n    const tags = data.allMdxPost.group\n\n    return <Layout title=\"文章标签\">\n      <MSection minH=\"calc(100vh - 20rem)\" justifyContent=\"\" textAlign=\"left\"\n      title=\"标签\" description={`共有 ${tags.length} 个标签`}>\n        <Tags mt=\"2\" items={tags.map((tag) => ({\n          ...tag,\n          name: tag.fieldValue,\n        }))} counted />\n      </MSection>\n    </Layout>\n}\n\nexport default TagList\n\nexport const query = graphql`\nquery {\n  allMdxPost(sort: { fields: tags___name, order: DESC }) {\n    group(field: tags___name) {\n      fieldValue\n      totalCount\n    }\n  }\n}`","import { Box, Flex, HStack, Link, Tag, TagLabel, TagLeftIcon, Wrap, WrapItem } from '@chakra-ui/react'\nimport kebabCase from 'lodash.kebabcase'\nimport React from 'react'\nimport MLink from '../components/link'\nimport { genColor } from '../styles/colors'\n\nconst Tags = ({ items = [], simple = false, counted = false, ...props }) => {\n    return <Wrap spacing={4} {...props}>{items.map(({name, totalCount}, idx) => (\n        <WrapItem key={idx}>\n            <MLink pure href={`/blogs/tag/${kebabCase(name)}`}>\n                <Tag borderRadius=\"full\" colorScheme={simple?\"gray\":genColor(name.slice(0).charCodeAt())}>\n                    <TagLabel># {name} {counted?`(${totalCount})`:\"\"}</TagLabel>\n                </Tag>\n            </MLink>\n        </WrapItem>))}\n    </Wrap>\n}\n\nexport default Tags"],"sourceRoot":""}